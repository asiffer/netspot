name: Build
on:
  workflow_dispatch:
jobs:
  build:
    name: Build (all architectures)
    runs-on: ubuntu-latest
    container: 
      image: golang:1.15.4-alpine
      env:
        LIBPCAP_VERSION: 1.9.1
        LIBPCAP_DIR: /libpcap
        # SYSTEM
        PACKAGES: nano bash linux-headers git flex bison wget make bluez-dev bluez
        # CGO_ENABLED: 1
        # CGO_LDFLAGS: -L${LIBPCAP_DIR}/libpcap-${LIBPCAP_VERSION}
        # CGO_CFLAGS: -O2 -I${LIBPCAP_DIR}/libpcap-${LIBPCAP_VERSION}
        # CROSS COMPILATION OPTIONS
        #Â see https://github.com/just-containers/musl-cross-make/releases/
        GCC_VERSION: 9.2.0
        MUSL_CROSS_MAKE_VERSION: v15
        TARGET_ARCH: x86_64-linux arm-linux aarch64-linux
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Symbolic link to GOPATH
        run: ln -s $GITHUB_WORKSPACE $GOPATH/src/netspot

      - name: Setup CGO env variables
        run: |
          echo CGO_ENABLED=1 >> $GITHUB_ENV
          echo CGO_LDFLAGS="-L${LIBPCAP_DIR}/libpcap-${LIBPCAP_VERSION}" >> $GITHUB_ENV
          echo CGO_CFLAGS="-O2 -I${LIBPCAP_DIR}/libpcap-${LIBPCAP_VERSION}" >> $GITHUB_ENV
          env

      - name: Get packages
        run: apk update; apk add $PACKAGES

      - name: Get libpcap sources
        run: "${GITHUB_WORKSPACE}/dev/image/get_libpcap_sources.sh"
      
      - name: Install toolchain
        run: "${GITHUB_WORKSPACE}/dev/image/install_toolchain.sh"

      - name: Build netspot (x86_64)
        run: $GITHUB_WORKSPACE/dev/build/builder.sh x86_64-linux

      - name: Build netspot (arm)
        run: $GITHUB_WORKSPACE/dev/build/builder.sh arm-linux

      - name: Build netspot (aarch64)
        run: $GITHUB_WORKSPACE/dev/build/builder.sh aarch64-linux

      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: netspot
          path: bin/
